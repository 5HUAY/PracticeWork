fn gray(n: u8) -> Vec<String> // Функція gray генерує послідовність кодів для заданого числа бітів n
                              // Vec<String>: вектор рядків, що представляє послідовність кодів Грея для n бітів
  #[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test() {
        let test_data = [
            (0, vec!("")), // Для n = 0: Оскільки немає бітів, повертається вектор з одним елементом — пустим рядком
            (1, vec!("0", "1")), // Для n = 1: Два коди: "0" та "1"
            (2, vec!("00", "01", "10", "11")), // Для n = 2: Чотири коди, які відображають всі можливі комбінації для двох бітів
            (3, vec!("000", "001", "010", "011", // Для n = 3: Вісім кодів, що представляють усі комбінації для трьох бітів
                     "100", "101", "110", "111")),
            (4, vec!("0000", "0001", "0010", "0011", // Для n = 4: Шістнадцять кодів, які охоплюють всі комбінації для чотирьох бітів
                     "0100", "0101", "0110", "0111",
                     "1000", "1001", "1010", "1011",
                     "1100", "1101", "1110", "1111")),
        ];

        for (n, expected) in test_data.iter() {
            assert_eq!(gray(*n), *expected);
        }
    }
}
